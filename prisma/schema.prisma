generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  comments             Comment[]
  discussions          Discussion[]
  DiscussionFavorites  DiscussionFavorites[]
  Flashcard            Flashcard[]
  FlashcardFavorites   FlashcardFavorites[]
  FlashcardParticipant FlashcardParticipant[]
  Likes                Like[]
  ProfilePermission    ProfilePermission?
  Quiz                 Quiz[]
  QuizParticipant      QuizParticipant[]
  sessions             Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Discussion {
  id                  Int                   @id @default(autoincrement())
  title               String                @db.VarChar(255)
  content             String?               @db.Text
  isQna               Boolean               @default(false)
  isAccepted          Boolean               @default(false)
  views               Int                   @default(0)
  parent_id           Int?
  authorId            String
  cAt                 DateTime              @default(now())
  mAt                 DateTime              @updatedAt
  User                User                  @relation(fields: [authorId], references: [id], onDelete: NoAction)
  Parent              Discussion?           @relation("ParentChild", fields: [parent_id], references: [id], onDelete: Cascade)
  Children            Discussion[]          @relation("ParentChild")
  DiscussionComment   DiscussionComment[]
  DiscussionFavorites DiscussionFavorites[]
  Likes               Like[]
  Tags                Tag[]                 @relation("DiscussionToTag")

  @@index([authorId])
  @@index([parent_id], map: "Discussion_parent_id_fkey")
}

model Like {
  discussion_id Int
  userId        String
  cAt           DateTime   @default(now())
  Discussion    Discussion @relation(fields: [discussion_id], references: [id], onDelete: Cascade)
  User          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([discussion_id, userId])
  @@index([userId], map: "Like_userId_fkey")
}

model IPTable {
  ip       String
  id       Int
  exiresAt DateTime
  cAt      DateTime @default(now())

  @@id([ip, id])
}

model Tag {
  name        String       @id
  description String?
  cAt         DateTime     @default(now())
  mAt         DateTime     @updatedAt
  Discussions Discussion[] @relation("DiscussionToTag")
  Flashcard   Flashcard[]  @relation("FlashcardToTag")
  Quizs       Quiz[]       @relation("QuizToTag")

  @@fulltext([name])
}

model Comment {
  id                Int                 @id @default(autoincrement())
  content_id        Int
  userId            String
  comment           String              @db.Text
  parent_comment_id Int?
  cAt               DateTime            @default(now())
  mAt               DateTime            @updatedAt
  type              CommentType         @default(DISCUSSION)
  Parent            Comment?            @relation("ParentChild", fields: [parent_comment_id], references: [id], onDelete: Cascade)
  Children          Comment[]           @relation("ParentChild")
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  DiscussionComment DiscussionComment[]

  @@index([userId])
  @@index([parent_comment_id], map: "Comment_parent_comment_id_fkey")
}

model DiscussionComment {
  discussion_id Int
  comment_id    Int
  Comment       Comment    @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  Discussion    Discussion @relation(fields: [discussion_id], references: [id], onDelete: Cascade)

  @@id([discussion_id, comment_id])
  @@index([comment_id], map: "DiscussionComment_comment_id_fkey")
}

model Quiz {
  quiz_id               Int                     @id @default(autoincrement())
  user_id               String
  quiz_name             String                  @db.VarChar(255)
  quiz_description      String                  @db.Text
  acl                   String                  @db.VarChar(255)
  cAt                   DateTime                @default(now())
  mAt                   DateTime                @updatedAt
  User                  User                    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  QuizParticipant       QuizParticipant[]
  QuizParticipantAnswer QuizParticipantAnswer[]
  QuizQuestion          QuizQuestion[]
  Tags                  Tag[]                   @relation("QuizToTag")

  @@index([user_id], map: "Quiz_user_id_fkey")
}

model QuizQuestion {
  question_id           Int                     @id @default(autoincrement())
  quiz_id               Int
  content               String                  @db.Text
  difficulty            Int
  score                 Int
  answer                String                  @db.Text
  is_multiple           Boolean
  cAt                   DateTime                @default(now())
  mAt                   DateTime                @updatedAt
  QuizAnswer            QuizAnswer[]
  QuizParticipantAnswer QuizParticipantAnswer[]
  Quiz                  Quiz                    @relation(fields: [quiz_id], references: [quiz_id])

  @@index([quiz_id], map: "QuizQuestion_quiz_id_fkey")
}

model QuizAnswer {
  answer_id             Int                     @id @default(autoincrement())
  question_id           Int
  content               String                  @db.Text
  isAnswer              Boolean
  cAt                   DateTime                @default(now())
  mAt                   DateTime                @updatedAt
  QuizQuestion          QuizQuestion            @relation(fields: [question_id], references: [question_id])
  QuizParticipantAnswer QuizParticipantAnswer[]

  @@index([question_id], map: "QuizAnswer_question_id_fkey")
}

model QuizParticipant {
  part_id               Int                     @id @default(autoincrement())
  quiz_id               Int
  user_id               String
  startTime             DateTime
  endTime               DateTime
  cAt                   DateTime                @default(now())
  Quiz                  Quiz                    @relation(fields: [quiz_id], references: [quiz_id])
  User                  User                    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  QuizParticipantAnswer QuizParticipantAnswer[]

  @@index([quiz_id], map: "QuizParticipant_quiz_id_fkey")
  @@index([user_id], map: "QuizParticipant_user_id_fkey")
}

model QuizParticipantAnswer {
  panswer_id      Int             @id @default(autoincrement())
  quiz_id         Int
  question_id     Int
  part_id         Int
  answer_id       Int
  cAt             DateTime        @default(now())
  mAt             DateTime        @updatedAt
  QuizAnswer      QuizAnswer      @relation(fields: [answer_id], references: [answer_id])
  QuizParticipant QuizParticipant @relation(fields: [part_id], references: [part_id])
  QuizQuestion    QuizQuestion    @relation(fields: [question_id], references: [question_id])
  Quiz            Quiz            @relation(fields: [quiz_id], references: [quiz_id])

  @@index([answer_id], map: "QuizParticipantAnswer_answer_id_fkey")
  @@index([part_id], map: "QuizParticipantAnswer_part_id_fkey")
  @@index([question_id], map: "QuizParticipantAnswer_question_id_fkey")
  @@index([quiz_id], map: "QuizParticipantAnswer_quiz_id_fkey")
}

model Flashcard {
  id                   Int                    @id @default(autoincrement())
  user_id              String
  name                 String
  description          String?
  acl                  Acl                    @default(PUBLIC)
  cAt                  DateTime               @default(now())
  mAt                  DateTime               @updatedAt
  User                 User                   @relation(fields: [user_id], references: [id])
  Contents             FlashcardContent[]
  FlashcardFavorites   FlashcardFavorites[]
  FlashcardParticipant FlashcardParticipant[]
  Tags                 Tag[]                  @relation("FlashcardToTag")

  @@index([user_id], map: "Flashcard_user_id_fkey")
}

model FlashcardContent {
  id              Int               @id @default(autoincrement())
  card_id         Int
  question        String
  answer          String
  difficulty      Int               @default(0)
  order           Int
  cAt             DateTime          @default(now())
  mAt             DateTime          @updatedAt
  FlashcardAnswer FlashcardAnswer[]
  Flashcard       Flashcard         @relation(fields: [card_id], references: [id], onDelete: Cascade)

  @@index([card_id], map: "FlashcardContent_card_id_fkey")
}

model FlashcardParticipant {
  id              Int               @id @default(autoincrement())
  card_id         Int
  user_id         String
  cAt             DateTime          @default(now())
  FlashcardAnswer FlashcardAnswer[]
  Card            Flashcard         @relation(fields: [card_id], references: [id], onDelete: Cascade)
  User            User              @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([card_id], map: "FlashcardParticipant_card_id_fkey")
  @@index([user_id], map: "FlashcardParticipant_user_id_fkey")
}

model FlashcardAnswer {
  id             Int                   @id @default(autoincrement())
  content_id     Int
  participant_id Int
  status         FlashcardAnswerStatus @default(UNANSWERED)
  cAt            DateTime              @default(now())
  Content        FlashcardContent      @relation(fields: [content_id], references: [id], onDelete: Cascade)
  Participant    FlashcardParticipant  @relation(fields: [participant_id], references: [id], onDelete: Cascade)

  @@index([content_id], map: "FlashcardAnswer_content_id_fkey")
  @@index([participant_id], map: "FlashcardAnswer_participant_id_fkey")
}

model DiscussionFavorites {
  discussionId Int
  userId       String
  cAt          DateTime   @default(now())
  Discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([discussionId, userId])
  @@index([userId], map: "DiscussionFavorites_userId_fkey")
}

model FlashcardFavorites {
  flashcardId Int
  userId      String
  cAt         DateTime  @default(now())
  Flashcard   Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([flashcardId, userId])
  @@index([userId], map: "FlashcardFavorites_userId_fkey")
}

model ProfilePermission {
  userId    String   @id
  home      Acl      @default(PUBLIC)
  favorites Acl      @default(PUBLIC)
  uploads   Acl      @default(PUBLIC)
  cAt       DateTime @default(now())
  mAt       DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CommentType {
  DISCUSSION
  FLASHCARD
  QUIZ
}

enum Acl {
  PUBLIC
  PRIVATE
}

enum FlashcardAnswerStatus {
  CORRECT
  WRONG
  UNANSWERED
}
