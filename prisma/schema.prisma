// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Nextauth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  discussions          Discussion[]
  Likes                Like[]
  comments             Comment[]
  Quiz                 Quiz[]
  QuizParticipant      QuizParticipant[]
  Flashcard            Flashcard[]
  FlashcardParticipant FlashcardParticipant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Discussion {
  id                Int                 @id @default(autoincrement())
  title             String              @db.VarChar(255)
  content           String?             @db.Text
  isQna             Boolean             @default(false)
  isAccepted        Boolean             @default(false)
  views             Int                 @default(0)
  parent_id         Int?
  Parent            Discussion?         @relation("ParentChild", fields: [parent_id], references: [id], onDelete: Cascade)
  Children          Discussion[]        @relation("ParentChild")
  authorId          String
  User              User                @relation(fields: [authorId], references: [id], onDelete: NoAction)
  cAt               DateTime            @default(now())
  mAt               DateTime            @updatedAt
  Likes             Like[]
  Tags              Tag[]
  DiscussionComment DiscussionComment[]

  @@index([authorId])
}

model Like {
  discussion_id Int
  Discussion    Discussion @relation(fields: [discussion_id], references: [id], onDelete: Cascade)
  userId        String
  User          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cAt           DateTime   @default(now())

  @@id([discussion_id, userId])
}

model IPTable {
  ip       String
  id       Int
  exiresAt DateTime
  cAt      DateTime @default(now())

  @@id([ip, id])
}

model Tag {
  name        String   @id
  description String?
  cAt         DateTime @default(now())
  mAt         DateTime @updatedAt

  Discussions Discussion[]
  Flashcard   Flashcard?   @relation(fields: [flashcardId], references: [id])
  flashcardId Int?
}

model Comment {
  id                Int                 @id @default(autoincrement())
  content_id        Int
  userId            String
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment           String              @db.Text
  parent_comment_id Int?
  Parent            Comment?            @relation("ParentChild", fields: [parent_comment_id], references: [id], onDelete: Cascade)
  Children          Comment[]           @relation("ParentChild")
  cAt               DateTime            @default(now())
  mAt               DateTime            @updatedAt
  DiscussionComment DiscussionComment[]

  @@index([userId])
}

model DiscussionComment {
  discussion_id Int
  Discussion    Discussion @relation(fields: [discussion_id], references: [id], onDelete: Cascade)
  comment_id    Int
  Comment       Comment    @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  @@id([discussion_id, comment_id])
}

model Quiz {
  quiz_id          Int               @id
  user_id          String // Assuming the type is String to match the User id type
  quiz_name        String            @db.VarChar(255)
  quiz_description String            @db.Text
  category         String            @db.VarChar(255)
  acl              String            @db.VarChar(255)
  cAt              DateTime
  mAt              DateTime
  QuizQuestion     QuizQuestion[]
  QuizParticipant  QuizParticipant[]

  User                  User                    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  QuizParticipantAnswer QuizParticipantAnswer[]
}

model QuizQuestion {
  question_id           Int                     @id
  quiz_id               Int
  content               String                  @db.Text
  difficulty            Int
  score                 Int
  answer                String                  @db.Text
  is_multiple           Boolean
  cAt                   DateTime
  mAt                   DateTime
  Quiz                  Quiz                    @relation(fields: [quiz_id], references: [quiz_id])
  QuizAnswer            QuizAnswer[]
  QuizParticipantAnswer QuizParticipantAnswer[]
}

model QuizAnswer {
  answer_id             Int                     @id
  question_id           Int
  content               String                  @db.Text
  isAnswer              Boolean
  cAt                   DateTime
  mAt                   DateTime
  QuizQuestion          QuizQuestion            @relation(fields: [question_id], references: [question_id])
  QuizParticipantAnswer QuizParticipantAnswer[]
}

model QuizParticipant {
  part_id               Int                     @id
  quiz_id               Int
  user_id               String // Assuming the type is String to match the User id type
  startTime             DateTime // Assuming startTime and endTime are DateTime types for timestamps
  endTime               DateTime
  cAt                   DateTime
  Quiz                  Quiz                    @relation(fields: [quiz_id], references: [quiz_id])
  User                  User                    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  QuizParticipantAnswer QuizParticipantAnswer[]
}

model QuizParticipantAnswer {
  panswer_id      Int             @id
  quiz_id         Int
  question_id     Int
  part_id         Int
  answer_id       Int
  cAt             DateTime
  mAt             DateTime
  Quiz            Quiz            @relation(fields: [quiz_id], references: [quiz_id])
  QuizQuestion    QuizQuestion    @relation(fields: [question_id], references: [question_id])
  QuizParticipant QuizParticipant @relation(fields: [part_id], references: [part_id])
  QuizAnswer      QuizAnswer      @relation(fields: [answer_id], references: [answer_id])
}

model Flashcard {
  id                   Int                    @id @default(autoincrement())
  user_id              String
  User                 User                   @relation(fields: [user_id], references: [id])
  name                 String
  description          String?
  Tags                 Tag[]
  Contents             FlashcardContent[]
  acl                  Acl                    @default(PUBLIC)
  cAt                  DateTime               @default(now())
  mAt                  DateTime               @updatedAt
  FlashcardParticipant FlashcardParticipant[]
}

model FlashcardContent {
  id         Int       @id @default(autoincrement())
  card_id    Int
  Flashcard  Flashcard @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  question   String
  answer     String
  difficulty Int       @default(0)
  cAt        DateTime  @default(now())
  mAt        DateTime  @updatedAt
}

model FlashcardParticipant {
  id      Int       @id @default(autoincrement())
  card_id Int
  user_id String
  User    User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Card    Flashcard @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cAt     DateTime  @default(now())
}

enum Acl {
  PUBLIC
  PRIVATE
  FRIENDS
}
